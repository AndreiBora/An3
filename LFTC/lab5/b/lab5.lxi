%{
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include "lab5.tab.h"

typedef struct{
  int key;
  int value;
} PIF;

typedef struct{
  char key[10];
} ST;

int pifLen = 0;
int constLen = 0;
int identLen = 0;
PIF program[500];
ST id_symtbl[50];
int const_symtbl[50];

void addPIF(int key, int value) {
	program[pifLen].key = key;
	program[pifLen].value = value;
	pifLen++;
}
void syntax_error(char* token) {
  printf("Illegal: %s\n", token);
}

void addConst(float token){
	int found= 0;
	for(int i=0;i < constLen;i++){
		if(const_symtbl[i] == token){
			found =1;
			addPIF(CONSTANT,i);	
		}	
	}
	if(found == 0){
		const_symtbl[constLen] = token;
		addPIF(CONSTANT,constLen);
		constLen++;	
	}
}

void addIdentif(char* atom){
	int found = 0;
	for(int i =0;i < identLen;i++){
		if(strcmp(id_symtbl[i].key,atom) == 0){
			found = 1;
			addPIF(IDENTIFIER,i);		
		}	
	}
	
	if(found == 0){
		strcpy(id_symtbl[identLen].key,atom);
		addPIF(IDENTIFIER,identLen);
		identLen++;	
	}
}

void showConst(){
	printf("--------------------\n");
	printf("%s\n","Constant table");
	for(int i =0;i < constLen;i++){
		printf("%d - %d  \n",const_symtbl[i],i);	
	}
	printf("--------------------\n");
}

void showIdent(){
	printf("--------------------\n");
	for(int i = 0;i < identLen;i++){
		printf("%s - %d \n",id_symtbl[i].key,i);	
	}
	printf("--------------------\n");
}

void showPIF(){
	printf("--------------------\n");
	printf("PIF\n");
	for(int i = 0;i < pifLen;i++){
		if(program[i].key != CONSTANT && program[i].key != IDENTIFIER){
			printf("%d \n",program[i].key);
					
		}else{
			printf("%d - %d \n",program[i].key,program[i].value);			
		}		
	}
	
	printf("--------------------\n");
}

void show(){
	showPIF();
	showIdent();
	showConst();
}

%}

%option yylineno
%option noyywrap
id		[a-zA-Z][a-zA-Z0-9_]*
digit		[0-9]
no		[1-9][0-9]*

%%

main		{addPIF(2,-1); return MAIN;}

\{		{addPIF(3,-1); return '{';}
\}		{addPIF(4,-1); return '}';}
\;		{addPIF(5,-1); return ';';}
\(		{addPIF(6,-1); return '(';}
\)		{addPIF(7,-1); return ')';}
\+		{addPIF(8,-1); return '+';}
\-		{addPIF(9,-1); return '-';}
\*		{addPIF(10,-1); return '*';}
\/		{addPIF(11,-1); return '/';}
cin		{addPIF(13,-1); return CIN;}
cout		{addPIF(14,-1); return COUT;}
while		{addPIF(15,-1); return WHILE;}
if		{addPIF(16,-1); return IF;}
else		{addPIF(17,-1); return ELSE;}
int		{addPIF(18,-1); return INT;}
float		{addPIF(19,-1); return FLOAT;}
char		{addPIF(20,-1); return CHAR;}
\>		{addPIF(21,-1); return GT;}
\>=		{addPIF(22,-1); return GTE;}
\<=		{addPIF(23,-1); return LTE;}
\<		{addPIF(24,-1); return LT;}
\=		{addPIF(25,-1); return '=';}
\==		{addPIF(26,-1); return EQ;}
\=!		{addPIF(27,-1); return NE;}
return		{addPIF(28,-1); return RETURN;}
struct		{addPIF(28,-1); return STRUCT;}
{digit}		{addConst(atoi(yytext)); return CONSTANT;}
{no}		{addConst(atoi(yytext)); return CONSTANT;}
{id}		{addIdentif(yytext); return IDENTIFIER;}
[ \t\n]+	; 
.		syntax_error(yytext);


%%
